#!/usr/bin/env python
# 
# Copyright (c) 2008 The Panucci Audiobook and Podcast Player Project
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 

app_version = '0.3.0'

import dbus
import dbus.glib
import os.path
import sys
from optparse import OptionParser

_ = lambda s: s

usage = 'usage: %prog [options] FILE'
parser = OptionParser(usage=usage, version='%prog '+'%s' % app_version)
parser.add_option('-q', '--queue', action='store', type='string',
    dest='queue_filename', help='Add FILE to the queue', metavar='FILE')
parser.add_option('-f', '--file', action='store', type='string',
    dest='open_filename', help='Clear the queue and play FILE',
    metavar='FILE')
parser.add_option('-d', '--debug', action='store_true', default=False,
    dest='debug', help='Enable verbose logging')
opts, args = parser.parse_args()

if None not in [ opts.queue_filename, opts.open_filename ] or len(args):
    parser.print_help()
    sys.exit(1)

local_module_dir = os.path.join(os.path.dirname(sys.argv[0]), '..', 'src')
if os.path.isdir(local_module_dir):
    sys.path.append(local_module_dir)

session_bus = dbus.SessionBus()
try:
    remote_object = session_bus.get_object('org.panucci', '/player')
    print _('Found panucci instance already running, will try to use it...')
except dbus.exceptions.DBusException:
    remote_object = None

if remote_object is None:
    from panucci import panucci
    from panucci import util
    util.logging_enabled = opts.debug
    panucci.app_version = app_version
    panucci.run(filename=opts.queue_filename or opts.open_filename)
else:
    if opts.open_filename is not None:
        remote_object.play_file(
            opts.open_filename, dbus_interface='org.panucci.interface' )
    elif opts.queue_filename is not None:
        remote_object.queue_file(
            opts.queue_filename, dbus_interface='org.panucci.interface' )

    remote_object.show_main_window(dbus_interface='org.panucci.interface')

