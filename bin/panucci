#!/usr/bin/env python
#
# This file is part of Panucci.
# Copyright (c) 2008-2009 The Panucci Audiobook and Podcast Player Project
#
# Panucci is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Panucci is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Panucci.  If not, see <http://www.gnu.org/licenses/>.
#

app_version = '0.3.0'

import dbus
import dbus.glib
import logging
import os.path
import sys
from optparse import OptionParser

_ = lambda s: s

usage = 'usage: %prog [options] FILE'
parser = OptionParser(usage=usage, version='%prog '+'%s' % app_version)
parser.add_option('-q', '--queue', action='store', type='string',
    dest='queue_filename', help='Add FILE to the queue', metavar='FILE')
parser.add_option('-f', '--file', action='store', type='string',
    dest='open_filename', help='Clear the queue and play FILE',
    metavar='FILE')
parser.add_option('-d', '--debug', action='store_true', default=False,
    dest='debug', help='Enable verbose logging')
opts, args = parser.parse_args()

if None not in [ opts.queue_filename, opts.open_filename ] or len(args):
    parser.print_help()
    sys.exit(1)

local_module_dir = os.path.join(os.path.dirname(sys.argv[0]), '..', 'src')
if os.path.isdir(local_module_dir):
    sys.path.append(local_module_dir)

session_bus = dbus.SessionBus()
try:
    remote_object = session_bus.get_object(
        'org.panucci.panucciInterface', '/panucciInterface' )
    print _('Found panucci instance already running, will try to use it...')
except dbus.exceptions.DBusException:
    remote_object = None

from panucci import util
if remote_object is None:
    from panucci import panucci
    log_level = logging.DEBUG if opts.debug else logging.ERROR
    logging.basicConfig(level=log_level)
    panucci.app_version = app_version
    panucci.run( filename=util.build_full_path(
        opts.queue_filename or opts.open_filename )) 
else:
    if opts.open_filename is not None:
        remote_object.play_file( util.build_full_path( opts.open_filename ))
    elif opts.queue_filename is not None:
        remote_object.queue_file( util.build_full_path( opts.queue_filename ))

    remote_object.show_main_window()

